<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gato Culto Multijugador</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Fredoka+One&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/gato.css" />
    <link rel="stylesheet" href="/css/chat-jugadores.css" /> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="page-container">
        <aside class="side-panel card">
            </aside>

        <div class="game-container">
            <div class="board-container">
                <div class="board" id="board">
                    </div>
            </div>
        </div>
    </div>

    <div class="modal" id="winner-modal">
        <div class="modal-content">
            <h2 class="modal-title" id="winner-title"></h2>
            <p class="modal-message" id="winner-message"></p>
            <div class="modal-buttons">
                <button class="btn btn-primary" id="play-again-btn"><i class="fas fa-play"></i> Jugar de Nuevo</button>
                <button class="btn btn-secondary" onclick="location.href='/minijuegos'"><i class="fas fa-home"></i> Menú Principal</button>
            </div>
        </div>
    </div>
    
    <div class="modal" id="question-modal">
        <div class="modal-content">
            <h2 class="modal-title">Pregunta de Cultura General</h2>
            <p class="question-text" id="question-text"></p>
            <div class="options-container" id="options-container"></div>
        </div>
    </div>

    <div class="notification" id="notification"></div>
    
    <div id="elementos-comunes" style="display: none;">
        <div class="panel players-info">
            <h3 class="panel-title"><i class="fas fa-users"></i> Jugadores</h3>
            <div id="players-list"></div>
        </div>
        <div class="panel card" id="chat-panel">
            <h3><i class="fas fa-comments"></i> Chat de la Sala</h3>
            <div id="chatBox"></div>
            <div class="chat-input">
                <input id="chatInput" type="text" placeholder="Escribe un mensaje…">
                <button id="chatBtn" class="chat-send">Enviar</button>
            </div>
        </div>
        <div class="panel card" id="jugadores-activos-panel">
            <h3><i class="fas fa-user-plus"></i> Invitar Jugadores</h3>
            <ul id="lista-jugadores-invitar"></ul>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const salaId = "{{salaId}}";
            const usuario = {{{json user}}};

            // DOM Elements
            const boardEl = document.getElementById('board');
            const playersListEl = document.getElementById('players-list');
            const winnerModal = document.getElementById('winner-modal');
            const winnerTitle = document.getElementById('winner-title');
            const winnerMessage = document.getElementById('winner-message');
            const questionModal = document.getElementById('question-modal');
            const questionText = document.getElementById('question-text');
            const optionsContainer = document.getElementById('options-container');
            const notificationEl = document.getElementById('notification');
            const playAgainBtn = document.getElementById('play-again-btn');

            // Paneles de Chat e Invitaciones
            const sidePanel = document.querySelector('.side-panel');
            const chatPanel = document.getElementById('chat-panel');
            const jugadoresActivosPanel = document.getElementById('jugadores-activos-panel');
            const chatBox = document.getElementById('chatBox');
            const chatInput = document.getElementById('chatInput');
            const chatBtn = document.getElementById('chatBtn');
            const listaJugadoresInvitarEl = document.getElementById('lista-jugadores-invitar');
            sidePanel.append(document.querySelector('.players-info'), chatPanel, jugadoresActivosPanel);
            
            // --- RENDERIZADO DEL JUEGO ---
            function render(gameState) {
                if (!gameState) {
                    playersListEl.innerHTML = `<div class="player-info"><div class="player-name">Esperando oponente...</div></div>`;
                    return;
                }
                
                // Renderizar tablero
                boardEl.innerHTML = '';
                gameState.board.forEach((symbol, index) => {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    if (symbol) {
                        cell.textContent = symbol;
                        cell.classList.add(symbol === 'X' ? 'x' : 'o');
                    }
                    cell.addEventListener('click', () => handleCellClick(index, gameState));
                    boardEl.appendChild(cell);
                });

                // Renderizar lista de jugadores y turno
                playersListEl.innerHTML = gameState.players.map((p, index) => `
                    <div class="player-info ${index === gameState.currentPlayerIndex ? 'current-turn' : ''}">
                        <div class="player-symbol ${p.symbol === 'X' ? 'player-1' : 'player-2'}">${p.symbol}</div>
                        <div class="player-name">${p.username}</div>
                        <div class="player-score">${gameState.scores[p.id]}</div>
                    </div>
                `).join('');
                
                // Mostrar ganador si el juego terminó
                if (gameState.gameOver) {
                    if (gameState.isTie) {
                        winnerTitle.textContent = '¡Empate! 🤝';
                        winnerMessage.textContent = 'El juego ha terminado en empate.';
                    } else {
                        winnerTitle.textContent = '¡Felicidades! 🎉';
                        winnerMessage.textContent = `${gameState.winner.username} ha ganado el juego.`;
                        confetti({ particleCount: 150, spread: 70, origin: { y: 0.6 } });
                    }
                    winnerModal.classList.add('active');
                } else {
                    winnerModal.classList.remove('active');
                }
            }
            
            // --- MANEJO DE EVENTOS ---
            function handleCellClick(index, gameState) {
                const myTurn = gameState.players[gameState.currentPlayerIndex].id === usuario.id_usuario;
                if (gameState.board[index] === null && !gameState.gameOver && myTurn) {
                    socket.emit('gato:prepararMovimiento', { salaId, index });
                }
            }

            playAgainBtn.addEventListener('click', () => {
                socket.emit('gato:nuevoJuego', { salaId });
                winnerModal.classList.remove('active');
            });

            function showNotification(message) {
                notificationEl.textContent = message;
                notificationEl.classList.add('show');
                setTimeout(() => notificationEl.classList.remove('show'), 3000);
            }

            // --- SOCKET LISTENERS ---
            socket.on('connect', () => {
                socket.emit('gato:unirse', { salaId, usuario });
            });
            
            socket.on('gato:updateState', render);

            socket.on('gato:pregunta', ({ question, options, cellIndex }) => {
                questionText.textContent = question;
                optionsContainer.innerHTML = '';
                options.forEach((option, index) => {
                    const btn = document.createElement('button');
                    btn.className = 'option-btn';
                    btn.textContent = option;
                    btn.onclick = () => {
                        socket.emit('gato:responder', { salaId, answerIndex: index });
                        questionModal.classList.remove('active');
                    };
                    optionsContainer.appendChild(btn);
                });
                questionModal.classList.add('active');
            });
            
            socket.on('gato:notification', ({ message }) => showNotification(message));
            
            // --- LÓGICA DE CHAT E INVITACIONES ---
            function mostrarMensaje(user, msg) {
                const msgDiv = document.createElement('div');
                msgDiv.innerHTML = `<span class="u">${user}:</span> <span>${msg}</span>`;
                chatBox.appendChild(msgDiv);
                chatBox.scrollTop = chatBox.scrollHeight;
            }
            function enviarMensaje() {
                const mensaje = chatInput.value.trim();
                if (mensaje) {
                    socket.emit('mensajeChat', { salaId, mensaje, usuario: usuario.username });
                    chatInput.value = '';
                }
            }
            chatBtn.addEventListener('click', enviarMensaje);
            chatInput.addEventListener('keypress', (e) => e.key === 'Enter' && enviarMensaje());
            socket.on('nuevoMensaje', (data) => mostrarMensaje(data.usuario, data.mensaje));

            async function cargarJugadoresActivos() {
                try {
                    const res = await fetch('/competitivo');
                    const jugadores = await res.json();
                    listaJugadoresInvitarEl.innerHTML = '';
                    jugadores.forEach(jugador => {
                        if (jugador.id === usuario.id_usuario) return;
                        const item = document.createElement('li');
                        item.innerHTML = `<span>${jugador.username}</span> <div class="actions"><button class="btn-invite" data-id="${jugador.id}">Invitar 🤝</button></div>`;
                        listaJugadoresInvitarEl.appendChild(item);
                    });
                } catch (error) { console.error('Error al cargar jugadores:', error); }
            }
            listaJugadoresInvitarEl.addEventListener('click', async (e) => {
                if (!e.target.classList.contains('btn-invite')) return;
                const idJugador = e.target.dataset.id;
                const response = await fetch(`/invitar/${idJugador}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ salaId, tipoJuego: 'Gato Culto' })
                });
                const data = await response.json();
                alert(data.message || 'Error');
            });

            // --- EJECUCIÓN INICIAL ---
            cargarJugadoresActivos();
            setInterval(cargarJugadoresActivos, 15000);
        });
    </script>
</body>
</html>