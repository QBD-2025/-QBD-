<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" href="/css/ahorcado.css">
<title>Juego del Ahorcado</title>
</head>
<body>
  <div class="page">
    <div class="header">
      <div class="title">üéØ Juego del Ahorcado</div>
      <div class="pill">
        Jugador: <strong>{{#if user}}{{user.username}}{{else}}Invitado{{/if}}</strong>
      </div>
      <button onclick="location.href='/minijuegos'" style="margin-left: 20px;"> ‚Üê Regresar</button>
    </div>

    {{!-- VISTA 1: MODO COOPERATIVO --}}
    <div id="vista-cooperativo">
      <section class="game card">
        <div class="controls"> 
          <label for="categoria-coop">Categor√≠a:</label>
          
          <select id="categoria-coop">
            <option>Cargando categor√≠as...</option>
          </select>
          <button id="reiniciar-coop">üîÑ Reiniciar</button>
        </div>
        <div class="canvas-wrap">
          <canvas id="canvas-coop" width="300" height="350"></canvas>
        </div>
        <div class="pista" id="pista-coop"></div>
        <div class="word" id="palabra-coop"></div>
        <div class="wrong" id="incorrectas-coop"></div>
        <div id="teclado-coop"></div>
      </section>
      <aside class="side">
        <div class="panel card" id="panel-central-coop">
          {{!-- El panel de jugadores y chat se mover√° aqu√≠ con JS --}}
        </div>
      </aside>
    </div>

    {{!-- VISTA 2: MODO ENFRENTAMIENTO --}}
    <div id="vista-enfrentamiento">
      {{!-- Panel del Jugador Local (Izquierda) --}}
      <section class="game-enfrentamiento card">
        <h2 id="nombre-local">{{user.username}}</h2>
        <div class="canvas-wrap">
          <canvas id="canvas-local" width="300" height="350"></canvas>
        </div>
        <div class="pista" id="pista-local"></div>
        <div class="word" id="palabra-local"></div>
        <div class="wrong" id="incorrectas-local"></div>
        <div id="teclado-local" class="teclado-enfrentamiento"></div>
      </section>
      
      {{!-- Panel Central (Timer, Jugadores, Chat) --}}
      <aside class="side" id="panel-central-enfrentamiento">
        <div class="timer-container">
          Tiempo: <span id="timer">02:00</span>
        </div>
        {{!-- El panel de jugadores y chat se mover√° aqu√≠ con JS --}}
      </aside>

      {{!-- Panel del Oponente (Derecha) --}}
      <section class="game-enfrentamiento card">
        <h2 id="nombre-oponente">Esperando...</h2>
        <div class="canvas-wrap">
          <canvas id="canvas-oponente" width="300" height="350"></canvas>
        </div>
        <div class="pista" id="pista-oponente"></div>
        <div class="word" id="palabra-oponente"></div>
        <div class="wrong" id="incorrectas-oponente"></div>
        <div id="teclado-oponente" class="teclado-enfrentamiento"></div>
      </section>
    </div>

    {{!-- Elementos Comunes (se mover√°n con JS a su lugar) --}}
    <div id="elementos-comunes" style="display: none;">
      <div class="panel card" id="jugadores-panel">
        <h3>üü¢ Jugadores activos</h3>
        <ul id="lista-jugadores"></ul>
      </div>
      <div class="panel card" id="chat-panel">
        <h3>üí¨ Chat</h3>
        <div id="chatBox"></div>
        <div class="chat-input">
          <input id="chatInput" type="text" placeholder="Escribe un mensaje‚Ä¶">
          <button id="chatBtn" class="chat-send">Enviar</button>
        </div>
      </div>
      <div class="panel card" id="panel-votacion-enfrentamiento" style="display: none;">
          <h3>üó≥Ô∏è Selecci√≥n de Categor√≠a</h3>s
          <div id="propuesta-actual">
              <p>Esperando que un jugador proponga una categor√≠a...</p>
          </div>
          <div id="area-proponer" style="display: none;">
              <label for="categoria-enfrentamiento-select">Elige una categor√≠a:</label>
              <select id="categoria-enfrentamiento-select"><option>Cargando...</option></select>
              <button id="proponer-btn">Proponer</button>
          </div>
          <div id="area-votar" style="display: none;">
              <button id="aceptar-btn">‚úÖ Aceptar</button>
              <button id="rechazar-btn">‚ùå Rechazar</button>
          </div>
      </div>
    </div>
  </div>

<script src="/socket.io/socket.io.js"></script>
<script>
// ========================== C√ìDIGO CORREGIDO Y UNIFICADO ==========================
document.addEventListener('DOMContentLoaded', () => {

    // ================== 1. INICIALIZACI√ìN Y VARIABLES GLOBALES ==================
    const socket = io();
    const salaId = "{{salaId}}";
    const usuario = {{{json user}}};

    const urlParams = new URLSearchParams(window.location.search);
    const modo = urlParams.get('modo') === 'enfrentamiento' ? 'enfrentamiento' : 'cooperativo';

    const vistaCooperativo = document.getElementById('vista-cooperativo');
    const vistaEnfrentamiento = document.getElementById('vista-enfrentamiento');
    const jugadoresPanel = document.getElementById('jugadores-panel');
    const chatPanel = document.getElementById('chat-panel');
    const chatBox = document.getElementById('chatBox');
    const chatInput = document.getElementById('chatInput');
    const chatBtn = document.getElementById('chatBtn');
    const listaJugadoresEl = document.getElementById('lista-jugadores');

    // --- Elementos Modo Cooperativo ---
    const categoriaCoopSelect = document.getElementById("categoria-coop");
    const pistaCoopDiv = document.getElementById("pista-coop");
    const palabraCoopDiv = document.getElementById("palabra-coop");
    const incorrectasCoopDiv = document.getElementById("incorrectas-coop");
    const tecladoCoopDiv = document.getElementById("teclado-coop");
    const reiniciarCoopBtn = document.getElementById("reiniciar-coop");
    const canvasCoop = document.getElementById("canvas-coop");
    const ctxCoop = canvasCoop.getContext("2d");

    // --- Elementos Modo Enfrentamiento ---
    const timerEl = document.getElementById('timer');
    const tecladoLocalDiv = document.getElementById("teclado-local");
    const tecladoOponenteDiv = document.getElementById("teclado-oponente");
    const palabraLocalDiv = document.getElementById("palabra-local");
    const incorrectasLocalDiv = document.getElementById("incorrectas-local");
    const canvasLocal = document.getElementById("canvas-local");
    const ctxLocal = canvasLocal.getContext("2d");
    const nombreOponenteEl = document.getElementById('nombre-oponente');
    const palabraOponenteDiv = document.getElementById("palabra-oponente");
    const incorrectasOponenteDiv = document.getElementById("incorrectas-oponente");
    const canvasOponente = document.getElementById("canvas-oponente");
    const ctxOponente = canvasOponente.getContext("2d");
    const pistaLocalDiv = document.getElementById('pista-local');
    const pistaOponenteDiv = document.getElementById('pista-oponente');
    // --- NUEVO: Elementos del Panel de Votaci√≥n ---
    const panelVotacion = document.getElementById('panel-votacion-enfrentamiento');
    const propuestaActualDiv = document.getElementById('propuesta-actual');
    const areaProponerDiv = document.getElementById('area-proponer');
    const areaVotarDiv = document.getElementById('area-votar');
    const categoriaEnfrentamientoSelect = document.getElementById('categoria-enfrentamiento-select');
    const proponerBtn = document.getElementById('proponer-btn');
    const aceptarBtn = document.getElementById('aceptar-btn');
    const rechazarBtn = document.getElementById('rechazar-btn');

    // --- Variables de estado del juego ---
    let timerInterval = null; // Para controlar el intervalo del reloj
    const MAX_ERRORES = 10; // N√∫mero m√°ximo de intentos permitidos

    // ================== 2. L√ìGICA DE SELECCI√ìN DE VISTA ==================
   // ================== 2. L√ìGICA DE SELECCI√ìN DE VISTA ==================
    if (modo === 'enfrentamiento') {
        vistaEnfrentamiento.style.display = 'grid';
        vistaCooperativo.style.display = 'none';
        // Adjunta los paneles, incluyendo el nuevo panel de votaci√≥n que se mostrar√° primero
        document.getElementById('panel-central-enfrentamiento').prepend(panelVotacion);
        document.getElementById('panel-central-enfrentamiento').append(jugadoresPanel, chatPanel);
        // Ocultar los tableros del juego al inicio hasta que se elija categor√≠a
        document.querySelectorAll('.game-enfrentamiento').forEach(el => el.style.visibility = 'hidden');
        document.querySelector('.timer-container').style.display = 'none';
        panelVotacion.style.display = 'block';
    } else {
        vistaCooperativo.style.display = 'grid';
        vistaEnfrentamiento.style.display = 'none';
        document.getElementById('panel-central-coop').append(jugadoresPanel, chatPanel);
    }

    // ================== 3. FUNCIONES DE RENDERIZADO (DIBUJO DEL JUEGO) ==================
    function crearTeclado(container, onLetraClick, isEnabled = true) {
        container.innerHTML = "";
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").forEach(letra => {
            let btn = document.createElement("button");
            btn.textContent = letra;
            btn.disabled = !isEnabled;
            btn.onclick = () => onLetraClick(letra, btn);
            container.appendChild(btn);
        });
    }

    function actualizarTeclado(container, letrasUsadas) {
        container.querySelectorAll('button').forEach(btn => {
            btn.disabled = letrasUsadas.includes(btn.textContent);
        });
    }

    function mostrarPalabra(div, palabraSecreta, letrasCorrectas) {
        div.textContent = palabraSecreta
            .split('')
            .map(letra => (letrasCorrectas.includes(letra) ? letra : '_'))
            .join(' ');
    }
    
    /**
     * Dibuja el ahorcado progresivamente seg√∫n el n√∫mero de errores.
     * MEJORADO: El orden de las piezas es ahora correcto, empezando por la base.
     */
    function dibujarAhorcado(ctx, errores) {
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 4;

        if (errores >= 1) { // 1. Base
            ctx.beginPath(); ctx.moveTo(10, 340); ctx.lineTo(290, 340); ctx.stroke();
        }
        if (errores >= 2) { // 2. Poste vertical
            ctx.beginPath(); ctx.moveTo(50, 340); ctx.lineTo(50, 20); ctx.stroke();
        }
        if (errores >= 3) { // 3. Viga horizontal
            ctx.beginPath(); ctx.moveTo(48, 20); ctx.lineTo(250, 20); ctx.stroke();
        }
        if (errores >= 4) { // 4. Soga
            ctx.beginPath(); ctx.moveTo(250, 20); ctx.lineTo(250, 60); ctx.stroke();
        }
        if (errores >= 5) { // 5. Cabeza
            ctx.beginPath(); ctx.arc(250, 90, 30, 0, Math.PI * 2); ctx.stroke();
        }
        if (errores >= 6) { // 6. Cuerpo
            ctx.beginPath(); ctx.moveTo(250, 120); ctx.lineTo(250, 220); ctx.stroke();
        }
        if (errores >= 7) { // 7. Brazo Izquierdo
            ctx.beginPath(); ctx.moveTo(250, 150); ctx.lineTo(200, 190); ctx.stroke();
        }
        if (errores >= 8) { // 8. Brazo Derecho
            ctx.beginPath(); ctx.moveTo(250, 150); ctx.lineTo(300, 190); ctx.stroke();
        }
        if (errores >= 9) { // 9. Pierna Izquierda
            ctx.beginPath(); ctx.moveTo(250, 220); ctx.lineTo(200, 280); ctx.stroke();
        }
        if (errores >= 10) { // 10. Pierna Derecha
            ctx.beginPath(); ctx.moveTo(250, 220); ctx.lineTo(300, 280); ctx.stroke();
        }
    }

    // ================== 4. L√ìGICA PRINCIPAL DEL JUEGO Y SOCKETS ==================

    async function fetchAndPopulateCategories(selectElement) {
        try {
            const response = await fetch('/ahorcado/materias');
            if (!response.ok) throw new Error('No se pudo obtener las materias.');
            const materias = await response.json();
            
            selectElement.innerHTML = '';
            materias.forEach(materia => {
                const option = document.createElement('option');
                option.value = materia.id_materia;
                option.textContent = materia.descripcion;
                selectElement.appendChild(option);
            });
        } catch (error) {
            console.error("Error al cargar categor√≠as:", error);
            selectElement.innerHTML = '<option>Error al cargar</option>';
        }
    }

    function unirseASala() {
        if (!salaId) return console.error("No hay ID de sala.");
        
        if (modo === 'enfrentamiento') {
            // Ya no se env√≠a idMateria al unirse, se har√° despu√©s de la votaci√≥n
            socket.emit('joinConfrontation', { salaId, usuario: usuario.username, userId: usuario.id_usuario });
        } else {
            const idMateria = categoriaCoopSelect.value || 1;
            socket.emit('unirseSala', { salaId, usuario: usuario.username, idMateria });
        }
    }

    // --- L√≥gica del Modo Cooperativo ---
    if (modo === 'cooperativo') {
        crearTeclado(tecladoCoopDiv, (letra, btn) => {
            socket.emit('intentarLetra', { salaId, letra });
            btn.disabled = true;
        });

        reiniciarCoopBtn.onclick = () => {
            socket.emit('reiniciarJuego', { salaId, idMateria: categoriaCoopSelect.value });
        };

        categoriaCoopSelect.onchange = () => {
             socket.emit('reiniciarJuego', { salaId, idMateria: categoriaCoopSelect.value });
        };

        socket.on('estadoPartida', (estado) => {
            dibujarAhorcado(ctxCoop, estado.letrasIncorrectas.length);
            mostrarPalabra(palabraCoopDiv, estado.palabraSecreta, estado.letrasCorrectas);
            incorrectasCoopDiv.textContent = `Incorrectas: ${estado.letrasIncorrectas.join(' ')}`;
            pistaCoopDiv.textContent = `Pista: ${estado.pista}`;
            actualizarTeclado(tecladoCoopDiv, [...estado.letrasCorrectas, ...estado.letrasIncorrectas]);
        });

        socket.on('juegoTerminado', (resultado) => {
            tecladoCoopDiv.innerHTML = "<h3>Juego Terminado</h3>";
            setTimeout(() => {
                const mensaje = resultado.ganador ? `¬°Ganaron! üéâ La palabra era: ${resultado.palabra}` : `Perdieron üò¢ La palabra era: ${resultado.palabra}`;
                alert(mensaje);
            }, 200);
        });
    }

    // --- L√≥gica del Modo Enfrentamiento ---
    if (modo === 'enfrentamiento') {
        crearTeclado(tecladoLocalDiv, (letra, btn) => {
            socket.emit('enfrentamiento:intentarLetra', { salaId, letra });
            btn.disabled = true;
        });
        crearTeclado(tecladoOponenteDiv, () => {}, false);

        /**
         * Inicia o actualiza el temporizador en el cliente.
         * MEJORADO: El reloj ahora es visualmente fluido y no depende de los eventos del juego.
         */
        function startTimer(initialTime) {
            if (timerInterval) clearInterval(timerInterval); // Limpia cualquier timer anterior

            let timeLeft = initialTime;

            timerInterval = setInterval(() => {
                timeLeft--;
                if (timeLeft < 0) {
                    clearInterval(timerInterval);
                    return;
                }
                const minutes = Math.floor(timeLeft / 60).toString().padStart(2, '0');
                const seconds = (timeLeft % 60).toString().padStart(2, '0');
                timerEl.textContent = `${minutes}:${seconds}`;
            }, 1000);
        }

        socket.on('confrontationUpdate', ({ gameState, gameStarted }) => {
            if (!gameState || !gameStarted) {
                palabraLocalDiv.textContent = "Esperando oponente...";
                return;
            }

            // --- A√ëADIDO: Muestra los elementos del juego y oculta la votaci√≥n ---
            panelVotacion.style.display = 'none';
            document.querySelectorAll('.game-enfrentamiento').forEach(el => el.style.visibility = 'visible');
            document.querySelector('.timer-container').style.display = 'block';
            // -------------------------------------------------------------------

            if (gameStarted && !timerInterval) {
                startTimer(gameState.gameTime);
            }

            const localPlayer = gameState.player1.id === usuario.id_usuario ? gameState.player1 : gameState.player2;
            const opponentPlayer = gameState.player1.id === usuario.id_usuario ? gameState.player2 : gameState.player1;

            if (opponentPlayer) {
                nombreOponenteEl.textContent = opponentPlayer.username;
            } else {
                nombreOponenteEl.textContent = "Esperando...";
            }
            
            const erroresLocal = localPlayer.letrasIncorrectas.length;
            dibujarAhorcado(ctxLocal, erroresLocal);
            pistaLocalDiv.textContent = `Pista: ${localPlayer.pista}`;
            mostrarPalabra(palabraLocalDiv, localPlayer.palabraSecreta, localPlayer.letrasCorrectas);
            incorrectasLocalDiv.textContent = `Intentos restantes: ${MAX_ERRORES - erroresLocal}`;
            actualizarTeclado(tecladoLocalDiv, [...localPlayer.letrasCorrectas, ...localPlayer.letrasIncorrectas]);

            // --- A√ëADIDO: Bloquea el teclado si se alcanzan los errores m√°ximos ---
            if (erroresLocal >= MAX_ERRORES) {
                tecladoLocalDiv.querySelectorAll('button').forEach(btn => btn.disabled = true);
            }
            // ---------------------------------------------------------------------

            if(opponentPlayer) {
                const erroresOponente = opponentPlayer.letrasIncorrectas.length;
                dibujarAhorcado(ctxOponente, erroresOponente);
                mostrarPalabra(palabraOponenteDiv, opponentPlayer.palabraSecreta, opponentPlayer.letrasCorrectas);
                incorrectasOponenteDiv.textContent = `Intentos restantes: ${MAX_ERRORES - erroresOponente}`;
                actualizarTeclado(tecladoOponenteDiv, [...opponentPlayer.letrasCorrectas, ...opponentPlayer.letrasIncorrectas]);
            }
        });
        // --- NUEVO: L√ìGICA COMPLETA PARA VOTACI√ìN DE CATEGOR√çA ---
        socket.on('enfrentamiento:esperandoOponente', () => {
             panelVotacion.style.display = 'block';
             propuestaActualDiv.innerHTML = `<p>Esperando a tu oponente...</p>`;
             areaProponerDiv.style.display = 'none';
             areaVotarDiv.style.display = 'none';
        });

        socket.on('enfrentamiento:iniciarVotacion', () => {
            panelVotacion.style.display = 'block';
            propuestaActualDiv.innerHTML = `<p>¬°Oponente conectado! Por favor, propone una categor√≠a.</p>`;
            areaProponerDiv.style.display = 'block';
            areaVotarDiv.style.display = 'none';
        });

        socket.on('enfrentamiento:nuevaPropuesta', ({ proponente, textoMateria }) => {
            panelVotacion.style.display = 'block';
            propuestaActualDiv.innerHTML = `<p><strong>${proponente}</strong> ha propuesto: <strong>${textoMateria}</strong></p>`;
            areaProponerDiv.style.display = 'none';
            // Si el usuario actual NO es el proponente, muestra los botones de votar
            if (proponente !== usuario.username) {
                areaVotarDiv.style.display = 'block';
            }
        });
        
        socket.on('enfrentamiento:propuestaRechazada', ({ votante }) => {
            alert(`${votante} ha rechazado la propuesta. ¬°Vuelvan a proponer!`);
            propuestaActualDiv.innerHTML = `<p>Propuesta rechazada. Esperando nueva propuesta...</p>`;
            areaVotarDiv.style.display = 'none';
            // El servidor deber√≠a emitir 'iniciarVotacion' de nuevo a quien le toque proponer
        });

        proponerBtn.onclick = () => {
            const select = categoriaEnfrentamientoSelect;
            const idMateria = select.value;
            const textoMateria = select.options[select.selectedIndex].text;
            socket.emit('enfrentamiento:proponerCategoria', { salaId, idMateria, textoMateria });
            propuestaActualDiv.innerHTML = `<p>Has propuesto: <strong>${textoMateria}</strong>. Esperando respuesta...</p>`;
            areaProponerDiv.style.display = 'none';
        };

        aceptarBtn.onclick = () => {
            socket.emit('enfrentamiento:votarCategoria', { salaId, voto: 'aceptado' });
            areaVotarDiv.style.display = 'none';
        };

        rechazarBtn.onclick = () => {
            socket.emit('enfrentamiento:votarCategoria', { salaId, voto: 'rechazado' });
            areaVotarDiv.style.display = 'none';
        };

        socket.on('gameOver', ({ winner }) => {
            if (timerInterval) clearInterval(timerInterval); // Detiene el reloj
            
            tecladoLocalDiv.innerHTML = "<h3>Partida Terminada</h3>";
            tecladoOponenteDiv.innerHTML = "";
            let mensaje = "¬°Ha sido un empate! ü§ù";
            if (winner) {
                mensaje = winner === usuario.id_usuario ? '¬°Ganaste la partida! üèÜ' : '¬°Perdiste la partida! üòî';
            }
            setTimeout(() => alert(mensaje), 500);
        });
    }

    // ================== 5. L√ìGICA COM√öN (CHAT Y JUGADORES) ==================
    function mostrarMensaje(user, msg) {
        const msgDiv = document.createElement('div');
        msgDiv.innerHTML = `<span class="u">${user}:</span> <span>${msg}</span>`;
        chatBox.appendChild(msgDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function enviarMensaje() {
        const mensaje = chatInput.value.trim();
        if (mensaje && salaId) {
            socket.emit('mensajeChat', { salaId, mensaje, usuario: usuario.username });
            chatInput.value = '';
        }
    }
    chatBtn.addEventListener('click', enviarMensaje);
    chatInput.addEventListener('keypress', (e) => e.key === 'Enter' && enviarMensaje());
    socket.on('nuevoMensaje', (data) => {
        if (data.usuario && data.mensaje) mostrarMensaje(data.usuario, data.mensaje);
    });

    async function cargarJugadoresActivos() {
        try {
            const res = await fetch('/competitivo');
            const jugadores = await res.json();
            listaJugadoresEl.innerHTML = '';
            
            jugadores.forEach(jugador => {
                if (jugador.id === usuario.id_usuario) return;
                const item = document.createElement('li');
                item.innerHTML = `<span>${jugador.username}</span> <div class="actions"><button class="btn-invite" data-id="${jugador.id}">Invitar ü§ù</button><button class="btn-challenge" data-id="${jugador.id}">Enfrentar ‚öîÔ∏è</button></div>`;
                listaJugadoresEl.appendChild(item);
            });
        } catch (error) { console.error('Error al cargar jugadores:', error); }
    }

    listaJugadoresEl.addEventListener('click', async (e) => {
        const target = e.target;
        const idJugador = target.dataset.id;
        if (!idJugador) return;
        try {
            if (target.classList.contains('btn-invite')) {
                const response = await fetch(`/invitar/${idJugador}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ salaId: salaId })
                });
                const data = await response.json();
                alert(data.message || 'Error');
            } else if (target.classList.contains('btn-challenge')) {
                const response = await fetch(`/enfrentar/${idJugador}`, { method: 'POST' });
                const data = await response.json();
                if (data.salaId && data.modo === 'enfrentamiento') {
                    alert('¬°Desaf√≠o enviado! Ser√°s redirigido a la sala de enfrentamiento.');
                    window.location.href = `/ahorcado/${data.salaId}?modo=enfrentamiento`;
                } else {
                    alert(data.message || 'Error al desafiar');
                }
            }
        } catch (error) {
            console.error('Error en acci√≥n de jugador:', error);
        }
    });

    // ================== 6. EJECUCI√ìN INICIAL ==================
    if (modo === 'cooperativo') {
        fetchAndPopulateCategories(categoriaCoopSelect).then(() => {
            unirseASala();
        });
    } else { // Modo Enfrentamiento
        // Cargamos las categor√≠as para el panel de votaci√≥n
        fetchAndPopulateCategories(categoriaEnfrentamientoSelect);
        // Nos unimos a la sala para empezar el proceso de votaci√≥n
        unirseASala();
    }
    
    cargarJugadoresActivos();
    setInterval(cargarJugadoresActivos, 15000); // Actualiza la lista de jugadores
});
</script>
</body>
</html>